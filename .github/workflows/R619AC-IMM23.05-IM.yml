#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build R619AC-IMM23.05-IM

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'Debugging with tmate'
        required: false
        default: 'false'
  watch:
    types: [started]

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: a.config
  DIY_P1_SH: 23.05diy-1.sh
  DIY_P2_SH: 23.05diy-2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Ho_Chi_Minh
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Set environment variables
        run: |
          echo "WORKDIR=/workdir" >> $GITHUB_ENV
          echo "OPENWRT_DIR=$WORKDIR/openwrt" >> $GITHUB_ENV

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p $WORKDIR
          sudo chown $USER:$GROUPS $WORKDIR

      - name: Clone source code
        working-directory: $WORKDIR
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH $OPENWRT_DIR
          ln -sf $OPENWRT_DIR $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds and configuration
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF $OPENWRT_DIR/feeds.conf.default
          chmod +x $DIY_P1_SH && sed -i -e 's/\r$//' $GITHUB_WORKSPACE/$DIY_P1_SH
          cd $OPENWRT_DIR
          $GITHUB_WORKSPACE/$DIY_P1_SH
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_DIR/.config
          chmod +x $DIY_P2_SH && sed -i -e 's/\r$//' $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Update and install feeds
        run: |
          cd $OPENWRT_DIR
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: ${{ github.event.inputs.ssh == 'true' }}
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          cd $OPENWRT_DIR
          make defconfig
          make download -j $(($(nproc)+1))
          find dl -size -1024c -exec ls -l {} \; -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd $OPENWRT_DIR
          echo -e "$(nproc) thread compile"
          make -j $(($(nproc)+1)) || make -j4 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: If Error
        if: steps.compile.outcome == 'failure'
        run: |
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=Firmware ${{ env.FILE_NAME }} failed to compile."
          cat $OPENWRT_DIR/.config
          echo '================================================================'
          cd $OPENWRT_DIR && make -j $(($(nproc)+1)) V=s

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_DIR }}/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd ${{ env.OPENWRT_DIR }}/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: IMM23.05-${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate and upload release
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "R619AC-IMM23.05-1" > release.txt
          RELEASE_TAG=$(date +"%Y.%m.%d")
          echo "::set-output name=release_tag::$RELEASE_TAG"
          gh release create $RELEASE_TAG -F release.txt ${{ env.FIRMWARE }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
