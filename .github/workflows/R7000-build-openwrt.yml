#=================================================
# 基于P3TERX/Actions-OpenWrt框架修改
# 适配Netgear R7000路由器的OpenWrt自动构建工作流
#=================================================

name: R7000-1-Build OpenWrt
on:
  repository_dispatch:  # 支持外部触发构建
  workflow_dispatch:    # 支持手动触发构建

env:
  # 基础配置 - 根据需求修改
  REPO_URL: https://github.com/coolsnowwolf/lede  # 源码仓库
  REPO_BRANCH: master                             # 源码分支
  FEEDS_CONF: feeds.conf.default                  #  feeds配置文件
  CONFIG_FILE: R7000.config                       # 编译配置文件
  DIY_P1_SH: R70001.sh                            # 预处理脚本
  DIY_P2_SH: R70002.sh                            # 后处理脚本
  
  # 构建参数 - 按需开启/关闭
  FREE_UP_DISK: true                              # 强制清理磁盘空间
  SSH_ACTIONS: false                              # 禁用SSH调试（减少安全风险）
  UPLOAD_BIN_DIR: false                           # 不上传完整bin目录（节省空间）
  UPLOAD_FIRMWARE: true                           # 上传最终固件
  UPLOAD_RELEASE: false                           # 默认不上传Release（按需开启）
  TZ: Asia/Shanghai                               # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # 1. 磁盘空间优化（合并重复清理步骤，提升效率）
      - name: 优化磁盘空间
        if: env.FREE_UP_DISK == 'true'
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 2048
          swap-size-mb: 4096                       # 增加swap大小，避免编译内存不足
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      # 2. 检查磁盘空间使用情况
      - name: 显示磁盘空间
        run: |
          echo "当前磁盘空间使用情况："
          df -hT

      # 3. 检出仓库代码
      - name: 检出工作流配置
        uses: actions/checkout@v4                   # 使用最新版checkout

      # 4. 初始化编译环境（精简依赖，只保留必要组件）
      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理冗余预装软件
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo docker image prune --all --force
          
          # 安装必要编译依赖（精简列表，移除不常用工具）
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk \
            gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils \
            rsync unzip zlib1g-dev file wget ccache ninja-build
          
          # 清理缓存
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      # 5. 缓存配置（加速重复构建）
      - name: 配置编译缓存
        uses: actions/cache@v3
        with:
          path: |
            openwrt/dl                              # 缓存下载的软件包
            ~/.ccache                               # 缓存编译中间文件
          key: ${{ runner.os }}-openwrt-r7000-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-openwrt-r7000-

      # 6. 克隆OpenWrt源码
      - name: 克隆源码
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          echo "源码克隆完成，当前版本：$(git rev-parse --short HEAD)"

      # 7. 加载自定义Feeds和预处理
      - name: 配置Feeds和预处理
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH  # 执行预处理脚本
          ./scripts/feeds update -a     # 更新Feeds
          ./scripts/feeds install -a    # 安装Feeds

      # 8. 应用自定义配置和后处理
      - name: 应用编译配置
        run: |
          [ -e files ] && mv files openwrt/files  # 复制自定义文件
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH  # 执行后处理脚本
          
          # 生成最终配置
          make defconfig

      # 9. 下载软件包（单独步骤，便于缓存复用）
      - name: 下载依赖包
        run: |
          cd openwrt
          make download -j$(nproc)
          # 清理无效文件（小于1KB的可能是错误文件）
          find dl -size -1024c -exec rm -f {} \;

      # 10. 编译固件（优化并行数，失败时输出详细日志）
      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          echo "使用$(nproc)线程编译"
          # 首次失败时，减少并行数并输出详细日志
          make -j$(nproc) || make -j1 V=s
          
          # 提取设备名称和编译时间
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      # 11. 整理输出文件
      - name: 整理固件文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages  # 移除冗余包目录
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      # 12. 上传固件作为Artifacts
      - name: 上传固件
        uses: actions/upload-artifact@v3
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_R7000${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      # 13. 上传到Release（按需开启）
      - name: 生成Release标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布到Release
        uses: softprops/action-gh-release@master
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*

      # 14. 清理旧工作流记录
      - name: 清理旧工作流
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 3        # 保留3天内的工作流记录
          keep_minimum_runs: 2  # 至少保留2条记录

      # 15. 清理旧Release
      - name: 清理旧Release
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3        # 保留最新3个Release
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
